import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Registration.css";

const Registration = () => {
  const [formData, setFormData] = useState({
    name: "",
    mail: "",
    password: ""
  });
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const togglePasswordVisibility = () => {
    setPasswordVisible(!passwordVisible);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!formData.name || !formData.mail || !formData.password) {
      setError("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
      return;
    }

    if (!agreeToTerms) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏");
      return;
    }

    if (!/^\S+@\S+\.\S+$/.test(formData.mail)) {
      setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
      return;
    }

    if (formData.password.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch('http://localhost:8080/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name,
          password: formData.password,//getSHA256Hash(formData.password),
          mail: formData.mail
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }

      const data = await response.json();

      localStorage.setItem("authToken", data.token);
      

      navigate("/personalAccount");

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
      setError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    } finally {
      setIsLoading(false);
    }
  };

  async function getSHA256Hash(str) {
    const buf = new TextEncoder().encode(str);
    const digest = await crypto.subtle.digest('SHA-256', buf);
    return Array.from(new Uint8Array(digest))
      .map(b => b.toString(16).padStart(2, '0'))
      .join('');
  }

  return (
    <div className="registration-wrapper">
      <div className="registration-container">
        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        {error && <div className="registration-error">{error}</div>}
        
        <form className="registration-form" onSubmit={handleSubmit}>
          <label className="registration-label">–§–ò–û</label>
          <input
            type="text"
            name="name"
            className="registration-input"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ"
            value={formData.name}
            onChange={handleChange}
            required
          />

          <label className="registration-label">Email</label>
          <input
            type="email"
            name="mail"
            className="registration-input"
            placeholder="example@email.com"
            value={formData.mail}
            onChange={handleChange}
            required
          />

          <label className="registration-label">–ü–∞—Ä–æ–ª—å</label>
          <div className="registration-password-container">
            <input
              type={passwordVisible ? "text" : "password"}
              name="password"
              className="registration-password-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
              value={formData.password}
              onChange={handleChange}
              minLength="6"
              required
            />
            <span
              className="registration-toggle-password"
              onClick={togglePasswordVisibility}
            >
              {passwordVisible ? "üôà" : "üëÅ"}
            </span>
          </div>

          <div className="registration-checkbox-container">
            <input 
              type="checkbox" 
              id="terms" 
              checked={agreeToTerms}
              onChange={() => setAgreeToTerms(!agreeToTerms)}
            />
            <label htmlFor="terms">
              –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å <a href="#">–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a> –∏{" "}
              <a href="#">–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
            </label>
          </div>

          <button 
            type="submit" 
            className="register-button"
            disabled={isLoading}
          >
            {isLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Registration;